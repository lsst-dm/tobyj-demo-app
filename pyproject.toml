[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "tobyj-demo-app"
description = "A demo application for phalanx"
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.12"
# Use requirements/main.in for runtime dependencies instead.
dependencies = []
dynamic = ["version"]

[project.scripts]
tobyj-demo-app = "tobyjdemoapp.cli:main"

[project.urls]
Homepage = "https://tobyj-demo-app.lsst.io"
Source = "https://github.com/lsst-dm/tobyj-demo-app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/tobyjdemoapp"]

[tool.hatch.version]
path = "src/tobyjdemoapp/__init__.py"
fallback-version = "0.0.0"

[tool.coverage.run]
parallel = true
branch = true
source = ["tobyjdemoapp"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
plugins = ["pydantic.mypy"]
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

# Use the generic Ruff configuration in ruff.toml and extend it with only
# project-specific settings. Add a [tool.ruff.lint.extend-per-file-ignores]
# section for project-specific ignore rules.
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.isort]
known-first-party = ["tobyjdemoapp", "tests"]
split-on-trailing-comma = false

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"

[tool.semantic_release]
commit_author = {env = "GIT_COMMIT_AUTHOR"}
version_variables = ["src/tobyjdemoapp/__init__.py:__version__"]
tag_format = "{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.ticket]
match = "^tickets/DM-\\d+(.*)$"
prerelease_token = "rc"
prerelease = true

[tool.semantic_release.branches.user]
match = "^u/(.*)/(.*)$"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.changelog]

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
